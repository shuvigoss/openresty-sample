master_process on;

worker_processes 1;

error_log logs/error.log info;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_rlimit_nofile 20480;

worker_shutdown_timeout 3;

http {
    include mime.types;
    lua_package_path "$prefix/src/?.lua;$prefix/deps/share/lua/5.1/?.lua;;";
    lua_package_cpath "$prefix/deps/lib/lua/5.1/?.so;;";

    log_format main '$remote_addr\t$http_x_forwarded_for\t$time_iso8601\t$scheme://$http_host\t$request\t$request_length\t'
    '$http_referer\t$http_user_agent\t$connection_requests\t$upstream_cache_status\t$status\t'
    '$request_time\t$upstream_response_time\t$bytes_sent\t$body_bytes_sent\t$server_name\t'
    '$upstream_addr\t$upstream_status\t$request_id\t';

    access_log logs/access.log main;

    lua_shared_dict process_events 1m;
    lua_shared_dict upstream       10m;
    lua_shared_dict apps           10m;

    lua_code_cache on;

    init_by_lua_block {
        init = require "init"
        init.init()
    }

    init_worker_by_lua_block {
        init.init_worker()
    }

    upstream sample_backend {
        server 0.0.0.0;

        balancer_by_lua_block {
            init.http_balancer_phase()
        }

        keepalive 320;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    server {
        listen 10666;
        listen [::]:10666;

        set $upstream_scheme             'http';
        set $upstream_host               $http_host;
        set $upstream_uri                '';

        location / {

            access_by_lua_block {
                init.http_access_phase()
            }

            body_filter_by_lua_block {
                init.http_body_filter_phase()
            }

            proxy_pass http://sample_backend;
        }
    }

}
